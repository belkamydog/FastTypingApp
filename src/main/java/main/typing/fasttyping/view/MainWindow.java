/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main.typing.fasttyping.view;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.Timer;
import main.typing.fasttyping.controller.TypingController;
import main.typing.fasttyping.model.LoadMemoryText;

/**
 *
 * @author artemefimov
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        hideAllKeys();
        ShowStat.setSelected(false);
        CONTROLLER = new TypingController();
        pageIndex = 0;
        globalIndex = 0;
        createTimer();
        CONTROLLER.setLanguage(LoadMemoryText.Languages.ru);
        MainPanel.setLayout(null);
        Russian.setSelected(true);
        English.setSelected(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        Metrics = new javax.swing.JPanel();
        speedLabel = new java.awt.Label();
        precisionValue = new java.awt.Label();
        speedVal = new java.awt.Label();
        precisionLabel = new java.awt.Label();
        currentSymbolLabel = new java.awt.Label();
        currentSymbolValue = new java.awt.Label();
        ProgressBar = new javax.swing.JProgressBar();
        Text = new javax.swing.JPanel();
        KeyboardPanel = new javax.swing.JPanel();
        SpaceKey = new javax.swing.JPanel();
        ShiftKeyR = new javax.swing.JPanel();
        ShiftKeyL = new javax.swing.JPanel();
        KeyZ = new javax.swing.JPanel();
        KeyX = new javax.swing.JPanel();
        KeyC = new javax.swing.JPanel();
        KeyV = new javax.swing.JPanel();
        KeyB = new javax.swing.JPanel();
        KeyN = new javax.swing.JPanel();
        KeyM = new javax.swing.JPanel();
        KeyBrus = new javax.swing.JPanel();
        KeyUy = new javax.swing.JPanel();
        KeyQuestSign = new javax.swing.JPanel();
        KeyA = new javax.swing.JPanel();
        KeyS = new javax.swing.JPanel();
        KeyD = new javax.swing.JPanel();
        KeyF = new javax.swing.JPanel();
        KeyG = new javax.swing.JPanel();
        KeyH = new javax.swing.JPanel();
        KeyJ = new javax.swing.JPanel();
        KeyK = new javax.swing.JPanel();
        KeyL = new javax.swing.JPanel();
        KeyGeRus = new javax.swing.JPanel();
        KeyEA = new javax.swing.JPanel();
        KeyQ = new javax.swing.JPanel();
        KeyW = new javax.swing.JPanel();
        KeyE = new javax.swing.JPanel();
        KeyR = new javax.swing.JPanel();
        KeyT = new javax.swing.JPanel();
        KeyY = new javax.swing.JPanel();
        KeyU = new javax.swing.JPanel();
        KeyI = new javax.swing.JPanel();
        KeyO = new javax.swing.JPanel();
        KeyP = new javax.swing.JPanel();
        KeyHe = new javax.swing.JPanel();
        KeyCloseBracketFigure = new javax.swing.JPanel();
        Key1 = new javax.swing.JPanel();
        Key2 = new javax.swing.JPanel();
        Key3 = new javax.swing.JPanel();
        Key4 = new javax.swing.JPanel();
        Key5 = new javax.swing.JPanel();
        Key6 = new javax.swing.JPanel();
        Key7 = new javax.swing.JPanel();
        Key8 = new javax.swing.JPanel();
        Key9 = new javax.swing.JPanel();
        Key0 = new javax.swing.JPanel();
        KeyMinus = new javax.swing.JPanel();
        KeyEqPlus = new javax.swing.JPanel();
        Keyboard = new javax.swing.JLabel();
        MenuBar = new javax.swing.JMenuBar();
        Actions = new javax.swing.JMenu();
        File = new javax.swing.JMenuItem();
        Buffer = new javax.swing.JMenuItem();
        random = new javax.swing.JMenuItem();
        Settings = new javax.swing.JMenu();
        Language = new javax.swing.JMenu();
        Russian = new javax.swing.JCheckBoxMenuItem();
        English = new javax.swing.JCheckBoxMenuItem();
        ShowStat = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 762, 630));
        setMinimumSize(new java.awt.Dimension(762, 630));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        MainPanel.setBackground(new java.awt.Color(0, 0, 0));
        MainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Metrics.setBackground(new java.awt.Color(0, 0, 0));

        speedLabel.setEnabled(false);
        speedLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        speedLabel.setText("speed:");

        precisionValue.setEnabled(false);
        precisionValue.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        precisionValue.setText("0 %");

        speedVal.setEnabled(false);
        speedVal.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        speedVal.setText("0 bpm");

        precisionLabel.setEnabled(false);
        precisionLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        precisionLabel.setText("precision:");

        currentSymbolLabel.setEnabled(false);
        currentSymbolLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        currentSymbolLabel.setText("current symbol:");

        currentSymbolValue.setEnabled(false);
        currentSymbolValue.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        currentSymbolValue.setText("''");

        javax.swing.GroupLayout MetricsLayout = new javax.swing.GroupLayout(Metrics);
        Metrics.setLayout(MetricsLayout);
        MetricsLayout.setHorizontalGroup(
            MetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MetricsLayout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(speedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(speedVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(precisionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(precisionValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(currentSymbolLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentSymbolValue, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );
        MetricsLayout.setVerticalGroup(
            MetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MetricsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(currentSymbolValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentSymbolLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(speedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(precisionValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(speedVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(precisionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        speedLabel.getAccessibleContext().setAccessibleDescription("");
        precisionLabel.getAccessibleContext().setAccessibleDescription("");

        MainPanel.add(Metrics, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 720, 40));

        ProgressBar.setBackground(new java.awt.Color(0, 0, 0));
        ProgressBar.setForeground(new java.awt.Color(0, 0, 0));
        ProgressBar.setBorder(null);
        MainPanel.add(ProgressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 740, 10));

        Text.setBackground(new java.awt.Color(0, 0, 0));
        Text.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout();
        flowLayout1.setAlignOnBaseline(true);
        Text.setLayout(flowLayout1);
        MainPanel.add(Text, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 740, 230));

        KeyboardPanel.setBackground(new java.awt.Color(0, 0, 0));
        KeyboardPanel.setLayout(null);

        SpaceKey.setBackground(new Color(242, 242, 242, 150));
        SpaceKey.setRequestFocusEnabled(false);

        javax.swing.GroupLayout SpaceKeyLayout = new javax.swing.GroupLayout(SpaceKey);
        SpaceKey.setLayout(SpaceKeyLayout);
        SpaceKeyLayout.setHorizontalGroup(
            SpaceKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 309, Short.MAX_VALUE)
        );
        SpaceKeyLayout.setVerticalGroup(
            SpaceKeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 44, Short.MAX_VALUE)
        );

        KeyboardPanel.add(SpaceKey);
        SpaceKey.setBounds(199, 215, 309, 44);

        ShiftKeyR.setBackground(new Color(242, 242, 242, 150));

        javax.swing.GroupLayout ShiftKeyRLayout = new javax.swing.GroupLayout(ShiftKeyR);
        ShiftKeyR.setLayout(ShiftKeyRLayout);
        ShiftKeyRLayout.setHorizontalGroup(
            ShiftKeyRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );
        ShiftKeyRLayout.setVerticalGroup(
            ShiftKeyRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 44, Short.MAX_VALUE)
        );

        KeyboardPanel.add(ShiftKeyR);
        ShiftKeyR.setBounds(635, 164, 110, 44);

        ShiftKeyL.setBackground(new Color(242, 242, 242, 150));

        javax.swing.GroupLayout ShiftKeyLLayout = new javax.swing.GroupLayout(ShiftKeyL);
        ShiftKeyL.setLayout(ShiftKeyLLayout);
        ShiftKeyLLayout.setHorizontalGroup(
            ShiftKeyLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );
        ShiftKeyLLayout.setVerticalGroup(
            ShiftKeyLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 44, Short.MAX_VALUE)
        );

        KeyboardPanel.add(ShiftKeyL);
        ShiftKeyL.setBounds(10, 164, 110, 44);

        KeyZ.setBackground(new Color(242, 242, 242, 150));
        KeyZ.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyZLayout = new javax.swing.GroupLayout(KeyZ);
        KeyZ.setLayout(KeyZLayout);
        KeyZLayout.setHorizontalGroup(
            KeyZLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyZLayout.setVerticalGroup(
            KeyZLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyZ);
        KeyZ.setBounds(125, 164, 45, 45);

        KeyX.setBackground(new Color(242, 242, 242, 150));
        KeyX.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyXLayout = new javax.swing.GroupLayout(KeyX);
        KeyX.setLayout(KeyXLayout);
        KeyXLayout.setHorizontalGroup(
            KeyXLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyXLayout.setVerticalGroup(
            KeyXLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyX);
        KeyX.setBounds(176, 164, 45, 45);

        KeyC.setBackground(new Color(242, 242, 242, 150));
        KeyC.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyCLayout = new javax.swing.GroupLayout(KeyC);
        KeyC.setLayout(KeyCLayout);
        KeyCLayout.setHorizontalGroup(
            KeyCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyCLayout.setVerticalGroup(
            KeyCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyC);
        KeyC.setBounds(227, 164, 45, 45);

        KeyV.setBackground(new Color(242, 242, 242, 150));
        KeyV.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyVLayout = new javax.swing.GroupLayout(KeyV);
        KeyV.setLayout(KeyVLayout);
        KeyVLayout.setHorizontalGroup(
            KeyVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyVLayout.setVerticalGroup(
            KeyVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyV);
        KeyV.setBounds(278, 164, 45, 45);

        KeyB.setBackground(new Color(242, 242, 242, 150));
        KeyB.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyBLayout = new javax.swing.GroupLayout(KeyB);
        KeyB.setLayout(KeyBLayout);
        KeyBLayout.setHorizontalGroup(
            KeyBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyBLayout.setVerticalGroup(
            KeyBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyB);
        KeyB.setBounds(329, 164, 45, 45);

        KeyN.setBackground(new Color(242, 242, 242, 150));
        KeyN.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyNLayout = new javax.swing.GroupLayout(KeyN);
        KeyN.setLayout(KeyNLayout);
        KeyNLayout.setHorizontalGroup(
            KeyNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyNLayout.setVerticalGroup(
            KeyNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyN);
        KeyN.setBounds(380, 164, 45, 45);

        KeyM.setBackground(new Color(242, 242, 242, 150));
        KeyM.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyMLayout = new javax.swing.GroupLayout(KeyM);
        KeyM.setLayout(KeyMLayout);
        KeyMLayout.setHorizontalGroup(
            KeyMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyMLayout.setVerticalGroup(
            KeyMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyM);
        KeyM.setBounds(431, 164, 45, 45);

        KeyBrus.setBackground(new Color(242, 242, 242, 150));
        KeyBrus.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyBrusLayout = new javax.swing.GroupLayout(KeyBrus);
        KeyBrus.setLayout(KeyBrusLayout);
        KeyBrusLayout.setHorizontalGroup(
            KeyBrusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyBrusLayout.setVerticalGroup(
            KeyBrusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyBrus);
        KeyBrus.setBounds(482, 164, 45, 45);

        KeyUy.setBackground(new Color(242, 242, 242, 150));
        KeyUy.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyUyLayout = new javax.swing.GroupLayout(KeyUy);
        KeyUy.setLayout(KeyUyLayout);
        KeyUyLayout.setHorizontalGroup(
            KeyUyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyUyLayout.setVerticalGroup(
            KeyUyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyUy);
        KeyUy.setBounds(533, 164, 45, 45);

        KeyQuestSign.setBackground(new Color(242, 242, 242, 150));
        KeyQuestSign.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyQuestSignLayout = new javax.swing.GroupLayout(KeyQuestSign);
        KeyQuestSign.setLayout(KeyQuestSignLayout);
        KeyQuestSignLayout.setHorizontalGroup(
            KeyQuestSignLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyQuestSignLayout.setVerticalGroup(
            KeyQuestSignLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyQuestSign);
        KeyQuestSign.setBounds(584, 164, 45, 45);

        KeyA.setBackground(new Color(242, 242, 242, 150));
        KeyA.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyALayout = new javax.swing.GroupLayout(KeyA);
        KeyA.setLayout(KeyALayout);
        KeyALayout.setHorizontalGroup(
            KeyALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyALayout.setVerticalGroup(
            KeyALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyA);
        KeyA.setBounds(99, 113, 45, 45);

        KeyS.setBackground(new Color(242, 242, 242, 150));
        KeyS.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeySLayout = new javax.swing.GroupLayout(KeyS);
        KeyS.setLayout(KeySLayout);
        KeySLayout.setHorizontalGroup(
            KeySLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeySLayout.setVerticalGroup(
            KeySLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyS);
        KeyS.setBounds(150, 113, 45, 45);

        KeyD.setBackground(new Color(242, 242, 242, 150));
        KeyD.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyDLayout = new javax.swing.GroupLayout(KeyD);
        KeyD.setLayout(KeyDLayout);
        KeyDLayout.setHorizontalGroup(
            KeyDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyDLayout.setVerticalGroup(
            KeyDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyD);
        KeyD.setBounds(201, 113, 45, 45);

        KeyF.setBackground(new Color(242, 242, 242, 150));
        KeyF.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyFLayout = new javax.swing.GroupLayout(KeyF);
        KeyF.setLayout(KeyFLayout);
        KeyFLayout.setHorizontalGroup(
            KeyFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyFLayout.setVerticalGroup(
            KeyFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyF);
        KeyF.setBounds(252, 113, 45, 45);

        KeyG.setBackground(new Color(242, 242, 242, 150));
        KeyG.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyGLayout = new javax.swing.GroupLayout(KeyG);
        KeyG.setLayout(KeyGLayout);
        KeyGLayout.setHorizontalGroup(
            KeyGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyGLayout.setVerticalGroup(
            KeyGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyG);
        KeyG.setBounds(303, 113, 45, 45);

        KeyH.setBackground(new Color(242, 242, 242, 150));
        KeyH.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyHLayout = new javax.swing.GroupLayout(KeyH);
        KeyH.setLayout(KeyHLayout);
        KeyHLayout.setHorizontalGroup(
            KeyHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyHLayout.setVerticalGroup(
            KeyHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyH);
        KeyH.setBounds(354, 113, 45, 45);

        KeyJ.setBackground(new Color(242, 242, 242, 150));
        KeyJ.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyJLayout = new javax.swing.GroupLayout(KeyJ);
        KeyJ.setLayout(KeyJLayout);
        KeyJLayout.setHorizontalGroup(
            KeyJLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyJLayout.setVerticalGroup(
            KeyJLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyJ);
        KeyJ.setBounds(405, 113, 45, 45);

        KeyK.setBackground(new Color(242, 242, 242, 150));
        KeyK.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyKLayout = new javax.swing.GroupLayout(KeyK);
        KeyK.setLayout(KeyKLayout);
        KeyKLayout.setHorizontalGroup(
            KeyKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyKLayout.setVerticalGroup(
            KeyKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyK);
        KeyK.setBounds(456, 113, 45, 45);

        KeyL.setBackground(new Color(242, 242, 242, 150));
        KeyL.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyLLayout = new javax.swing.GroupLayout(KeyL);
        KeyL.setLayout(KeyLLayout);
        KeyLLayout.setHorizontalGroup(
            KeyLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyLLayout.setVerticalGroup(
            KeyLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyL);
        KeyL.setBounds(507, 113, 45, 45);

        KeyGeRus.setBackground(new Color(242, 242, 242, 150));
        KeyGeRus.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyGeRusLayout = new javax.swing.GroupLayout(KeyGeRus);
        KeyGeRus.setLayout(KeyGeRusLayout);
        KeyGeRusLayout.setHorizontalGroup(
            KeyGeRusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyGeRusLayout.setVerticalGroup(
            KeyGeRusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyGeRus);
        KeyGeRus.setBounds(558, 113, 45, 45);

        KeyEA.setBackground(new Color(242, 242, 242, 150));
        KeyEA.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyEALayout = new javax.swing.GroupLayout(KeyEA);
        KeyEA.setLayout(KeyEALayout);
        KeyEALayout.setHorizontalGroup(
            KeyEALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyEALayout.setVerticalGroup(
            KeyEALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyEA);
        KeyEA.setBounds(609, 113, 45, 45);

        KeyQ.setBackground(new Color(242, 242, 242, 150));
        KeyQ.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyQLayout = new javax.swing.GroupLayout(KeyQ);
        KeyQ.setLayout(KeyQLayout);
        KeyQLayout.setHorizontalGroup(
            KeyQLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyQLayout.setVerticalGroup(
            KeyQLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyQ);
        KeyQ.setBounds(87, 62, 45, 45);

        KeyW.setBackground(new Color(242, 242, 242, 150));
        KeyW.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyWLayout = new javax.swing.GroupLayout(KeyW);
        KeyW.setLayout(KeyWLayout);
        KeyWLayout.setHorizontalGroup(
            KeyWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyWLayout.setVerticalGroup(
            KeyWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyW);
        KeyW.setBounds(138, 62, 45, 45);

        KeyE.setBackground(new Color(242, 242, 242, 150));
        KeyE.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyELayout = new javax.swing.GroupLayout(KeyE);
        KeyE.setLayout(KeyELayout);
        KeyELayout.setHorizontalGroup(
            KeyELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyELayout.setVerticalGroup(
            KeyELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyE);
        KeyE.setBounds(189, 62, 45, 45);

        KeyR.setBackground(new Color(242, 242, 242, 150));
        KeyR.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyRLayout = new javax.swing.GroupLayout(KeyR);
        KeyR.setLayout(KeyRLayout);
        KeyRLayout.setHorizontalGroup(
            KeyRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyRLayout.setVerticalGroup(
            KeyRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyR);
        KeyR.setBounds(240, 62, 45, 45);

        KeyT.setBackground(new Color(242, 242, 242, 150));
        KeyT.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyTLayout = new javax.swing.GroupLayout(KeyT);
        KeyT.setLayout(KeyTLayout);
        KeyTLayout.setHorizontalGroup(
            KeyTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyTLayout.setVerticalGroup(
            KeyTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyT);
        KeyT.setBounds(291, 62, 45, 45);

        KeyY.setBackground(new Color(242, 242, 242, 150));
        KeyY.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyYLayout = new javax.swing.GroupLayout(KeyY);
        KeyY.setLayout(KeyYLayout);
        KeyYLayout.setHorizontalGroup(
            KeyYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyYLayout.setVerticalGroup(
            KeyYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyY);
        KeyY.setBounds(342, 62, 45, 45);

        KeyU.setBackground(new Color(242, 242, 242, 150));
        KeyU.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyULayout = new javax.swing.GroupLayout(KeyU);
        KeyU.setLayout(KeyULayout);
        KeyULayout.setHorizontalGroup(
            KeyULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyULayout.setVerticalGroup(
            KeyULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyU);
        KeyU.setBounds(393, 62, 45, 45);

        KeyI.setBackground(new Color(242, 242, 242, 150));
        KeyI.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyILayout = new javax.swing.GroupLayout(KeyI);
        KeyI.setLayout(KeyILayout);
        KeyILayout.setHorizontalGroup(
            KeyILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyILayout.setVerticalGroup(
            KeyILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyI);
        KeyI.setBounds(444, 62, 45, 45);

        KeyO.setBackground(new Color(242, 242, 242, 150));
        KeyO.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyOLayout = new javax.swing.GroupLayout(KeyO);
        KeyO.setLayout(KeyOLayout);
        KeyOLayout.setHorizontalGroup(
            KeyOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyOLayout.setVerticalGroup(
            KeyOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyO);
        KeyO.setBounds(495, 62, 45, 45);

        KeyP.setBackground(new Color(242, 242, 242, 150));
        KeyP.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyPLayout = new javax.swing.GroupLayout(KeyP);
        KeyP.setLayout(KeyPLayout);
        KeyPLayout.setHorizontalGroup(
            KeyPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyPLayout.setVerticalGroup(
            KeyPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyP);
        KeyP.setBounds(546, 62, 45, 45);

        KeyHe.setBackground(new Color(242, 242, 242, 150));
        KeyHe.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyHeLayout = new javax.swing.GroupLayout(KeyHe);
        KeyHe.setLayout(KeyHeLayout);
        KeyHeLayout.setHorizontalGroup(
            KeyHeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyHeLayout.setVerticalGroup(
            KeyHeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyHe);
        KeyHe.setBounds(597, 62, 45, 45);

        KeyCloseBracketFigure.setBackground(new Color(242, 242, 242, 150));
        KeyCloseBracketFigure.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyCloseBracketFigureLayout = new javax.swing.GroupLayout(KeyCloseBracketFigure);
        KeyCloseBracketFigure.setLayout(KeyCloseBracketFigureLayout);
        KeyCloseBracketFigureLayout.setHorizontalGroup(
            KeyCloseBracketFigureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyCloseBracketFigureLayout.setVerticalGroup(
            KeyCloseBracketFigureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyCloseBracketFigure);
        KeyCloseBracketFigure.setBounds(648, 62, 45, 45);

        Key1.setBackground(new Color(242, 242, 242, 150));
        Key1.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout Key1Layout = new javax.swing.GroupLayout(Key1);
        Key1.setLayout(Key1Layout);
        Key1Layout.setHorizontalGroup(
            Key1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        Key1Layout.setVerticalGroup(
            Key1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(Key1);
        Key1.setBounds(61, 11, 45, 45);

        Key2.setBackground(new Color(242, 242, 242, 150));
        Key2.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout Key2Layout = new javax.swing.GroupLayout(Key2);
        Key2.setLayout(Key2Layout);
        Key2Layout.setHorizontalGroup(
            Key2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        Key2Layout.setVerticalGroup(
            Key2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(Key2);
        Key2.setBounds(112, 11, 45, 45);

        Key3.setBackground(new Color(242, 242, 242, 150));
        Key3.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout Key3Layout = new javax.swing.GroupLayout(Key3);
        Key3.setLayout(Key3Layout);
        Key3Layout.setHorizontalGroup(
            Key3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        Key3Layout.setVerticalGroup(
            Key3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(Key3);
        Key3.setBounds(163, 11, 45, 45);

        Key4.setBackground(new Color(242, 242, 242, 150));
        Key4.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout Key4Layout = new javax.swing.GroupLayout(Key4);
        Key4.setLayout(Key4Layout);
        Key4Layout.setHorizontalGroup(
            Key4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        Key4Layout.setVerticalGroup(
            Key4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(Key4);
        Key4.setBounds(214, 11, 45, 45);

        Key5.setBackground(new Color(242, 242, 242, 150));
        Key5.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout Key5Layout = new javax.swing.GroupLayout(Key5);
        Key5.setLayout(Key5Layout);
        Key5Layout.setHorizontalGroup(
            Key5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        Key5Layout.setVerticalGroup(
            Key5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(Key5);
        Key5.setBounds(265, 11, 45, 45);

        Key6.setBackground(new Color(242, 242, 242, 150));
        Key6.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout Key6Layout = new javax.swing.GroupLayout(Key6);
        Key6.setLayout(Key6Layout);
        Key6Layout.setHorizontalGroup(
            Key6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        Key6Layout.setVerticalGroup(
            Key6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(Key6);
        Key6.setBounds(316, 11, 45, 45);

        Key7.setBackground(new Color(242, 242, 242, 150));
        Key7.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout Key7Layout = new javax.swing.GroupLayout(Key7);
        Key7.setLayout(Key7Layout);
        Key7Layout.setHorizontalGroup(
            Key7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        Key7Layout.setVerticalGroup(
            Key7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(Key7);
        Key7.setBounds(367, 11, 45, 45);

        Key8.setBackground(new Color(242, 242, 242, 150));
        Key8.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout Key8Layout = new javax.swing.GroupLayout(Key8);
        Key8.setLayout(Key8Layout);
        Key8Layout.setHorizontalGroup(
            Key8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        Key8Layout.setVerticalGroup(
            Key8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(Key8);
        Key8.setBounds(418, 11, 45, 45);

        Key9.setBackground(new Color(242, 242, 242, 150));
        Key9.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout Key9Layout = new javax.swing.GroupLayout(Key9);
        Key9.setLayout(Key9Layout);
        Key9Layout.setHorizontalGroup(
            Key9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        Key9Layout.setVerticalGroup(
            Key9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(Key9);
        Key9.setBounds(469, 11, 45, 45);

        Key0.setBackground(new Color(242, 242, 242, 150));
        Key0.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout Key0Layout = new javax.swing.GroupLayout(Key0);
        Key0.setLayout(Key0Layout);
        Key0Layout.setHorizontalGroup(
            Key0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        Key0Layout.setVerticalGroup(
            Key0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(Key0);
        Key0.setBounds(520, 11, 45, 45);

        KeyMinus.setBackground(new Color(242, 242, 242, 150));
        KeyMinus.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyMinusLayout = new javax.swing.GroupLayout(KeyMinus);
        KeyMinus.setLayout(KeyMinusLayout);
        KeyMinusLayout.setHorizontalGroup(
            KeyMinusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyMinusLayout.setVerticalGroup(
            KeyMinusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyMinus);
        KeyMinus.setBounds(571, 11, 45, 45);

        KeyEqPlus.setBackground(new Color(242, 242, 242, 150));
        KeyEqPlus.setBounds(123, 162, 48, 48);

        javax.swing.GroupLayout KeyEqPlusLayout = new javax.swing.GroupLayout(KeyEqPlus);
        KeyEqPlus.setLayout(KeyEqPlusLayout);
        KeyEqPlusLayout.setHorizontalGroup(
            KeyEqPlusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        KeyEqPlusLayout.setVerticalGroup(
            KeyEqPlusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        KeyboardPanel.add(KeyEqPlus);
        KeyEqPlus.setBounds(622, 11, 45, 45);

        Keyboard.setIcon(new javax.swing.ImageIcon("/Users/artemefimov/NetBeansProjects/FastTyping/src/main/java/main/typing/fasttyping/images/keyboard.png")); // NOI18N
        KeyboardPanel.add(Keyboard);
        Keyboard.setBounds(5, 0, 750, 270);

        MainPanel.add(KeyboardPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 290, 760, 270));

        Actions.setText("Text");

        File.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.META_DOWN_MASK));
        File.setText("Load text from file");
        File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileActionPerformed(evt);
            }
        });
        Actions.add(File);

        Buffer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.META_DOWN_MASK));
        Buffer.setText("Load text from buffer");
        Buffer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BufferActionPerformed(evt);
            }
        });
        Actions.add(Buffer);

        random.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.META_DOWN_MASK));
        random.setText("Load random text");
        random.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomActionPerformed(evt);
            }
        });
        Actions.add(random);

        MenuBar.add(Actions);

        Settings.setText("Settings");

        Language.setText("Random text language");

        Russian.setSelected(true);
        Russian.setText("Russian");
        Russian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RussianActionPerformed(evt);
            }
        });
        Language.add(Russian);

        English.setSelected(true);
        English.setText("English");
        English.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnglishActionPerformed(evt);
            }
        });
        Language.add(English);

        Settings.add(Language);

        ShowStat.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.META_DOWN_MASK));
        ShowStat.setSelected(true);
        ShowStat.setText("Show statistic");
        ShowStat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowStatActionPerformed(evt);
            }
        });
        Settings.add(ShowStat);

        MenuBar.add(Settings);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileActionPerformed
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.showOpenDialog(this);
            File currentFile = fileChooser.getSelectedFile();
            if (currentFile != null) {
                CONTROLLER.loadFromFile(currentFile);
                createTextArea();
            }
            reset();
    }//GEN-LAST:event_FileActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        String keyboardSymbol = String.valueOf(evt.getKeyChar());
        String currentTextSymbol;
        if (Text.getComponents().length > 0 && pageIndex < Text.getComponents().length) {
            currentTextSymbol = ((JLabel) Text.getComponent(pageIndex)).getText();
            if (currentTextSymbol.equals(keyboardSymbol)) {
                startTimer();
                CONTROLLER.rightInput(evt.getKeyChar());
                Text.getComponent(pageIndex).setForeground(Color.WHITE);
                showNextPage();
            } else {
                Text.getComponent(pageIndex).setForeground(Color.RED);
                if(evt.getExtendedKeyCode() != 16)
                    CONTROLLER.wrongInput(currentTextSymbol.charAt(0));
            }
            ProgressBar.setValue(CONTROLLER.getProgress(globalIndex));
            setNextSymbol();
        }
        stopTimer();
        Text.updateUI();
    }//GEN-LAST:event_formKeyPressed

    private void BufferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BufferActionPerformed
        CONTROLLER.loadFromBuffer();
        reset();
        hideAllKeys();
        createTextArea();
    }//GEN-LAST:event_BufferActionPerformed

    private void randomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomActionPerformed
        CONTROLLER.getNextMemoryText();
        reset();
        hideAllKeys();
        createTextArea();
    }//GEN-LAST:event_randomActionPerformed

    private void RussianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RussianActionPerformed
        English.setSelected(false);
        CONTROLLER.setLanguage(LoadMemoryText.Languages.ru);
    }//GEN-LAST:event_RussianActionPerformed

    private void EnglishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnglishActionPerformed
        Russian.setSelected(false);
        CONTROLLER.setLanguage(LoadMemoryText.Languages.en);
    }//GEN-LAST:event_EnglishActionPerformed

    private void ShowStatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowStatActionPerformed
       if (ShowStat.getState()){
            ShowStat.setSelected(true);
            timer.stop();
            String language = System.getProperty("user.language");
            if (language.equals("en"))
                    showEnStat();
            else if (language.equals("ru"))
                    showRusStat();
       }
       else {
           ShowStat.setSelected(false);
           hideAllKeys();
       }
    }//GEN-LAST:event_ShowStatActionPerformed

    private void showRusStat(){
        setKeyStatisticColor(KeyQ, CONTROLLER.getPrecisionStatistic('й'));
        setKeyStatisticColor(KeyW, CONTROLLER.getPrecisionStatistic('ц'));
        setKeyStatisticColor(KeyE, CONTROLLER.getPrecisionStatistic('у'));
        setKeyStatisticColor(KeyR, CONTROLLER.getPrecisionStatistic('к'));
        setKeyStatisticColor(KeyT, CONTROLLER.getPrecisionStatistic('е'));
        setKeyStatisticColor(KeyY, CONTROLLER.getPrecisionStatistic('н'));
        setKeyStatisticColor(KeyU, CONTROLLER.getPrecisionStatistic('г'));
        setKeyStatisticColor(KeyI, CONTROLLER.getPrecisionStatistic('ш'));
        setKeyStatisticColor(KeyO, CONTROLLER.getPrecisionStatistic('щ'));
        setKeyStatisticColor(KeyP, CONTROLLER.getPrecisionStatistic('з'));
        
        setKeyStatisticColor(KeyA, CONTROLLER.getPrecisionStatistic('ф'));
        setKeyStatisticColor(KeyS, CONTROLLER.getPrecisionStatistic('ы'));
        setKeyStatisticColor(KeyD, CONTROLLER.getPrecisionStatistic('в'));
        setKeyStatisticColor(KeyF, CONTROLLER.getPrecisionStatistic('а'));
        setKeyStatisticColor(KeyG, CONTROLLER.getPrecisionStatistic('п'));
        setKeyStatisticColor(KeyH, CONTROLLER.getPrecisionStatistic('р'));
        setKeyStatisticColor(KeyJ, CONTROLLER.getPrecisionStatistic('о'));
        setKeyStatisticColor(KeyK, CONTROLLER.getPrecisionStatistic('л'));
        setKeyStatisticColor(KeyL, CONTROLLER.getPrecisionStatistic('д'));
        
        setKeyStatisticColor(KeyZ, CONTROLLER.getPrecisionStatistic('я'));
        setKeyStatisticColor(KeyX, CONTROLLER.getPrecisionStatistic('ч'));
        setKeyStatisticColor(KeyC, CONTROLLER.getPrecisionStatistic('с'));
        setKeyStatisticColor(KeyV, CONTROLLER.getPrecisionStatistic('м'));
        setKeyStatisticColor(KeyB, CONTROLLER.getPrecisionStatistic('и'));
        setKeyStatisticColor(KeyN, CONTROLLER.getPrecisionStatistic('т'));
        setKeyStatisticColor(KeyM, CONTROLLER.getPrecisionStatistic('ь'));
        
        setKeyStatisticColor(KeyBrus, CONTROLLER.getPrecisionStatistic('б'));
        setKeyStatisticColor(KeyCloseBracketFigure, CONTROLLER.getPrecisionStatistic('ъ'));
        setKeyStatisticColor(KeyGeRus, CONTROLLER.getPrecisionStatistic('ж'));
        setKeyStatisticColor(KeyHe, CONTROLLER.getPrecisionStatistic('х'));
        setKeyStatisticColor(KeyUy, CONTROLLER.getPrecisionStatistic('ю'));
        setKeyStatisticColor(KeyEA, CONTROLLER.getPrecisionStatistic('э'));             
    }
    
    private void setKeyStatisticColor(javax.swing.JPanel keyPanel, double precision){
        keyPanel.setVisible(true);
        if (precision >= 100) {
            keyPanel.setBackground(new Color(144, 238, 144, 150)); // Light Green
        } else if (precision >= 90) {
            keyPanel.setBackground(new Color(255, 255, 0, 150)); // Yellow
        } else if (precision >= 80) {
            keyPanel.setBackground(new Color(255, 165, 0, 150)); // Orange
        } else if (precision >= 70) {
            keyPanel.setBackground(new Color(255, 69, 0, 150)); // Red Orange
        } else if (precision >= 60) {
            keyPanel.setBackground(new Color(255, 0, 0, 150)); // Red
        } else if (precision <= 50) {
            keyPanel.setBackground(new Color(128, 0, 0, 150)); // Dark Red
        }
    }
    
    private void showEnStat(){
        setKeyStatisticColor(KeyQ, CONTROLLER.getPrecisionStatistic('q'));
        setKeyStatisticColor(KeyW, CONTROLLER.getPrecisionStatistic('w'));
        setKeyStatisticColor(KeyE, CONTROLLER.getPrecisionStatistic('e'));
        setKeyStatisticColor(KeyR, CONTROLLER.getPrecisionStatistic('r'));
        setKeyStatisticColor(KeyT, CONTROLLER.getPrecisionStatistic('t'));
        setKeyStatisticColor(KeyY, CONTROLLER.getPrecisionStatistic('y'));
        setKeyStatisticColor(KeyU, CONTROLLER.getPrecisionStatistic('u'));
        setKeyStatisticColor(KeyI, CONTROLLER.getPrecisionStatistic('i'));
        setKeyStatisticColor(KeyO, CONTROLLER.getPrecisionStatistic('o'));
        setKeyStatisticColor(KeyP, CONTROLLER.getPrecisionStatistic('p'));
        
        setKeyStatisticColor(KeyA, CONTROLLER.getPrecisionStatistic('a'));
        setKeyStatisticColor(KeyS, CONTROLLER.getPrecisionStatistic('s'));
        setKeyStatisticColor(KeyD, CONTROLLER.getPrecisionStatistic('d'));
        setKeyStatisticColor(KeyF, CONTROLLER.getPrecisionStatistic('f'));
        setKeyStatisticColor(KeyG, CONTROLLER.getPrecisionStatistic('g'));
        setKeyStatisticColor(KeyH, CONTROLLER.getPrecisionStatistic('h'));
        setKeyStatisticColor(KeyJ, CONTROLLER.getPrecisionStatistic('j'));
        setKeyStatisticColor(KeyK, CONTROLLER.getPrecisionStatistic('k'));
        setKeyStatisticColor(KeyL, CONTROLLER.getPrecisionStatistic('l'));
        
        setKeyStatisticColor(KeyZ, CONTROLLER.getPrecisionStatistic('z'));
        setKeyStatisticColor(KeyX, CONTROLLER.getPrecisionStatistic('x'));
        setKeyStatisticColor(KeyC, CONTROLLER.getPrecisionStatistic('c'));
        setKeyStatisticColor(KeyV, CONTROLLER.getPrecisionStatistic('v'));
        setKeyStatisticColor(KeyB, CONTROLLER.getPrecisionStatistic('b'));
        setKeyStatisticColor(KeyN, CONTROLLER.getPrecisionStatistic('n'));
        setKeyStatisticColor(KeyM, CONTROLLER.getPrecisionStatistic('m'));                   
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    private void keyboardAnimation(char pressed) {
       if (Character.isUpperCase(pressed)) {
           pressed = Character.toLowerCase(pressed);
           ShiftKeyL.setVisible(true);
           ShiftKeyR.setVisible(true);
       }
       String language = System.getProperty("user.language");
       if (language.equals("en")) enKeyboard(pressed);
       else if (language.equals("ru")) rusKeyboard(pressed);
       KeyboardPanel.updateUI();
    }
    
    private void numKeys(char pressed){
        if (pressed == '1') Key1.setVisible(true);
        else if (pressed == '2') Key2.setVisible(true);
        else if (pressed == '3') Key3.setVisible(true);
        else if (pressed == '4') Key4.setVisible(true);
        else if (pressed == '5') Key5.setVisible(true);
        else if (pressed == '6') Key6.setVisible(true);
        else if (pressed == '7') Key7.setVisible(true);
        else if (pressed == '8') Key8.setVisible(true);
        else if (pressed == '9') Key9.setVisible(true);
        else if (pressed == '0') Key0.setVisible(true);
        else if (pressed == '-') KeyMinus.setVisible(true);
        else if (pressed == '=') KeyEqPlus.setVisible(true);
    }
    
    private void rusKeyboard(char pressed){
        if (pressed == 'й') KeyQ.setVisible(true);
        else if (pressed == 'ц') KeyW.setVisible(true);
        else if (pressed == 'у') KeyE.setVisible(true);
        else if (pressed == 'к') KeyR.setVisible(true);
        else if (pressed == 'е') KeyT.setVisible(true);
        else if (pressed == 'н') KeyY.setVisible(true);
        else if (pressed == 'г') KeyU.setVisible(true);
        else if (pressed == 'ш') KeyI.setVisible(true);
        else if (pressed == 'щ') KeyO.setVisible(true);
        else if (pressed == 'з') KeyP.setVisible(true);
        else if (pressed == 'х') KeyHe.setVisible(true);
        else if (pressed == 'ъ') KeyCloseBracketFigure.setVisible(true);
        
        else if (pressed == 'ф') KeyA.setVisible(true);
        else if (pressed == 'ы') KeyS.setVisible(true);
        else if (pressed == 'в') KeyD.setVisible(true);
        else if (pressed == 'а') KeyF.setVisible(true);
        else if (pressed == 'п') KeyG.setVisible(true);
        else if (pressed == 'р') KeyH.setVisible(true);
        else if (pressed == 'о') KeyJ.setVisible(true);
        else if (pressed == 'л') KeyK.setVisible(true);
        else if (pressed == 'д') KeyL.setVisible(true);
        else if (pressed == 'ж') KeyGeRus.setVisible(true);
        else if (pressed == 'э') KeyEA.setVisible(true);
        
        else if (pressed == 'я') KeyZ.setVisible(true);
        else if (pressed == 'ч') KeyX.setVisible(true);
        else if (pressed == 'с') KeyC.setVisible(true);
        else if (pressed == 'м') KeyV.setVisible(true);
        else if (pressed == 'и') KeyB.setVisible(true);
        else if (pressed == 'т') KeyN.setVisible(true);
        else if (pressed == 'ь') KeyM.setVisible(true);
        else if (pressed == 'б') KeyBrus.setVisible(true);
        else if (pressed == 'ю') KeyUy.setVisible(true);

        else if (RUS_TWINS_KEYS.indexOf(pressed)!= -1){
           ShiftKeyL.setVisible(true);
           ShiftKeyR.setVisible(true);
           if (pressed == '!') Key1.setVisible(true);
           else if (pressed == '"') Key2.setVisible(true);
           else if (pressed == '№') Key3.setVisible(true);
           else if (pressed == '%') Key4.setVisible(true);
           else if (pressed == ':') Key5.setVisible(true);
           else if (pressed == ',') Key6.setVisible(true);
           else if (pressed == '.') Key7.setVisible(true);
           else if (pressed == ';') Key8.setVisible(true);
           else if (pressed == '(') Key9.setVisible(true);
           else if (pressed == ')') Key0.setVisible(true);
           else if (pressed == '_') KeyMinus.setVisible(true);
           else if (pressed == '+') KeyEqPlus.setVisible(true);
           else if (pressed == '?') KeyQuestSign.setVisible(true);
        }
        else if (pressed == ' ') SpaceKey.setVisible(true);
        numKeys(pressed);
    }
    
    private void enKeyboard(char pressed){
        if (pressed == 'q') KeyQ.setVisible(true);
        else if (pressed == 'w') KeyW.setVisible(true);
        else if (pressed == 'e') KeyE.setVisible(true);
        else if (pressed == 'r') KeyR.setVisible(true);
        else if (pressed == 't') KeyT.setVisible(true);
        else if (pressed == 'y') KeyY.setVisible(true);
        else if (pressed == 'u') KeyU.setVisible(true);
        else if (pressed == 'i') KeyI.setVisible(true);
        else if (pressed == 'o') KeyO.setVisible(true);
        else if (pressed == 'p') KeyP.setVisible(true);

        else if (pressed == 'a') KeyA.setVisible(true);
        else if (pressed == 's') KeyS.setVisible(true);
        else if (pressed == 'd') KeyD.setVisible(true);
        else if (pressed == 'f') KeyF.setVisible(true);
        else if (pressed == 'g') KeyG.setVisible(true);
        else if (pressed == 'h') KeyH.setVisible(true);
        else if (pressed == 'j') KeyJ.setVisible(true);
        else if (pressed == 'k') KeyK.setVisible(true);
        else if (pressed == 'l') KeyL.setVisible(true);

        else if (pressed == 'z') KeyZ.setVisible(true);
        else if (pressed == 'x') KeyX.setVisible(true);
        else if (pressed == 'c') KeyC.setVisible(true);
        else if (pressed == 'v') KeyV.setVisible(true);
        else if (pressed == 'b') KeyB.setVisible(true);
        else if (pressed == 'n') KeyN.setVisible(true);
        else if (pressed == 'm') KeyM.setVisible(true);

        else if (pressed == ' ') SpaceKey.setVisible(true);
        else if (EN_TWINS_KEYS.indexOf(pressed)!= -1){
            ShiftKeyL.setVisible(true);
            ShiftKeyR.setVisible(true);
            if (pressed == '!') Key1.setVisible(true);
            else if (pressed == '"') Key2.setVisible(true);
            else if (pressed == '№') Key3.setVisible(true);
            else if (pressed == '%') Key4.setVisible(true);
            else if (pressed == ':') Key5.setVisible(true);
            else if (pressed == ',') Key6.setVisible(true);
            else if (pressed == '.') Key7.setVisible(true);
            else if (pressed == ';') Key8.setVisible(true);
            else if (pressed == '(') Key9.setVisible(true);
            else if (pressed == ')') Key0.setVisible(true);
            else if (pressed == '_') KeyMinus.setVisible(true);
            else if (pressed == '+') KeyEqPlus.setVisible(true);
            else if (pressed == '?') KeyQuestSign.setVisible(true);
            else if (pressed == '<') KeyBrus.setVisible(true);
            else if (pressed == '>') KeyUy.setVisible(true);
       }
        
        else if (pressed == '[') KeyHe.setVisible(true);
        else if (pressed == ']') KeyCloseBracketFigure.setVisible(true);
        else if (pressed == ';') KeyGeRus.setVisible(true);
        else if (pressed == '\'')KeyEA.setVisible(true);
        else if (pressed == ',') KeyBrus.setVisible(true);
        else if (pressed == '.') KeyUy.setVisible(true);
        else if (pressed == '/') KeyQuestSign.setVisible(true);
        
        numKeys(pressed);
    }
    
    private void setNextSymbol(){
        if (pageIndex < Text.getComponents().length-1){
            hideAllKeys();
            String ch = ((JLabel) Text.getComponent(pageIndex)).getText();
            keyboardAnimation(ch.charAt(0));
            if (ch.equals(" ")) ch = "space";
            else if (ch.equals("\n")) ch = "enter";
            currentSymbolValue.setText("'" +  ch + "'");
        }
    }
    
    private void createTextArea(){
        String text = CONTROLLER.getPage();
        Text.removeAll();
        for (int i = 0; i < text.length(); i++) {
            JLabel symbol = new JLabel(String.valueOf(text.charAt(i)));
            symbol.setFont(new Font("Arial", Font.PLAIN, 25));
            symbol.setForeground(Color.GRAY);
            Text.add(symbol);
        }
        Text.updateUI();
    }
    
    private void createTimer(){
        timer = new Timer(1000, e -> {
            CONTROLLER.getDataFromGui(globalIndex + 1, timeSeconds);
            timeSeconds++;
            precisionValue.setText(preparePrecision(CONTROLLER.getPrecision()));
            speedVal.setText(prepareSpeed(CONTROLLER.getBpm()));
        });
    }
    
    private void startTimer(){
        if (globalIndex > 0 && !timer.isRunning()){
            timer.start();
        }
    }
    
    private void stopTimer(){
        if (globalIndex >= CONTROLLER.getTextLength()-1){
            timer.stop();
        }
    }
    
    private void showNextPage(){
        if (pageIndex == CONTROLLER.getPartSize()-1 && CONTROLLER.hasNextPage()){
            Text.removeAll();
            pageIndex = 0;
            createTextArea();
            Text.updateUI();
        }
        else pageIndex++;
        globalIndex++;
    }
    
    private void reset(){
        timer.stop();
        precisionValue.setText("0");
        speedVal.setText("0");
        pageIndex = 0;
        globalIndex = 0;
        timeSeconds = 0;
        ProgressBar.setValue(0);
        Text.updateUI();
    }
    
    private String preparePrecision(double precision){
        return String.format("%.1f %%", precision);
    }
    
    private String prepareSpeed(int speed){
        return String.format("%d bpm", speed);
    }
    
    private void hideAllKeys(){
        Component [] keys = KeyboardPanel.getComponents();
        for (Component i : keys){
            i.setVisible(false);
            i.setBackground(new Color(242, 242, 242, 150));
        }
        Keyboard.setVisible(true);
    }
        
    private final String EN_TWINS_KEYS = "!@#$%^&*()_+{}:\"<>?";
    private final String RUS_TWINS_KEYS = "!\"№%:,.;()_+?"; 
    private final TypingController CONTROLLER;
    private int pageIndex;
    private int globalIndex;
    private Timer timer;
    private int timeSeconds;
     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Actions;
    private javax.swing.JMenuItem Buffer;
    private javax.swing.JCheckBoxMenuItem English;
    private javax.swing.JMenuItem File;
    private javax.swing.JPanel Key0;
    private javax.swing.JPanel Key1;
    private javax.swing.JPanel Key2;
    private javax.swing.JPanel Key3;
    private javax.swing.JPanel Key4;
    private javax.swing.JPanel Key5;
    private javax.swing.JPanel Key6;
    private javax.swing.JPanel Key7;
    private javax.swing.JPanel Key8;
    private javax.swing.JPanel Key9;
    private javax.swing.JPanel KeyA;
    private javax.swing.JPanel KeyB;
    private javax.swing.JPanel KeyBrus;
    private javax.swing.JPanel KeyC;
    private javax.swing.JPanel KeyCloseBracketFigure;
    private javax.swing.JPanel KeyD;
    private javax.swing.JPanel KeyE;
    private javax.swing.JPanel KeyEA;
    private javax.swing.JPanel KeyEqPlus;
    private javax.swing.JPanel KeyF;
    private javax.swing.JPanel KeyG;
    private javax.swing.JPanel KeyGeRus;
    private javax.swing.JPanel KeyH;
    private javax.swing.JPanel KeyHe;
    private javax.swing.JPanel KeyI;
    private javax.swing.JPanel KeyJ;
    private javax.swing.JPanel KeyK;
    private javax.swing.JPanel KeyL;
    private javax.swing.JPanel KeyM;
    private javax.swing.JPanel KeyMinus;
    private javax.swing.JPanel KeyN;
    private javax.swing.JPanel KeyO;
    private javax.swing.JPanel KeyP;
    private javax.swing.JPanel KeyQ;
    private javax.swing.JPanel KeyQuestSign;
    private javax.swing.JPanel KeyR;
    private javax.swing.JPanel KeyS;
    private javax.swing.JPanel KeyT;
    private javax.swing.JPanel KeyU;
    private javax.swing.JPanel KeyUy;
    private javax.swing.JPanel KeyV;
    private javax.swing.JPanel KeyW;
    private javax.swing.JPanel KeyX;
    private javax.swing.JPanel KeyY;
    private javax.swing.JPanel KeyZ;
    private javax.swing.JLabel Keyboard;
    private javax.swing.JPanel KeyboardPanel;
    private javax.swing.JMenu Language;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JPanel Metrics;
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JCheckBoxMenuItem Russian;
    private javax.swing.JMenu Settings;
    private javax.swing.JPanel ShiftKeyL;
    private javax.swing.JPanel ShiftKeyR;
    private javax.swing.JCheckBoxMenuItem ShowStat;
    private javax.swing.JPanel SpaceKey;
    private javax.swing.JPanel Text;
    private java.awt.Label currentSymbolLabel;
    private java.awt.Label currentSymbolValue;
    private java.awt.Label precisionLabel;
    private java.awt.Label precisionValue;
    private javax.swing.JMenuItem random;
    private java.awt.Label speedLabel;
    private java.awt.Label speedVal;
    // End of variables declaration//GEN-END:variables
}
